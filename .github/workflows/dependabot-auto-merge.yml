name: Dependabot Auto-Merge

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]
  check_run:
    types: [completed]
  status: {}
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to auto-merge'
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  auto-rebase-and-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check if PR is from Dependabot
        id: check-dependabot
        run: |
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "is_dependabot=true" >> $GITHUB_OUTPUT
          else
            echo "is_dependabot=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR details
        id: pr-details
        if: steps.check-dependabot.outputs.is_dependabot == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.inputs?.pr_number || 
                             context.payload.pull_request?.number || 
                             context.issue?.number;
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_state', pr.state);
            core.setOutput('mergeable', pr.mergeable);
            core.setOutput('mergeable_state', pr.mergeable_state);
            
            return pr;

      - name: Check all status checks
        id: check-status
        if: steps.check-dependabot.outputs.is_dependabot == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.inputs?.pr_number || 
                             context.payload.pull_request?.number || 
                             context.issue?.number;
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Get combined status for the head SHA
            const { data: status } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            // Get check runs for the head SHA
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            // More detailed check logic
            const allStatusesSuccess = status.state === 'success' || status.statuses.length === 0;
            
            // Check if all check runs are completed and successful (including skipped)
            // Exclude this workflow's own check runs to avoid circular dependency
            const relevantCheckRuns = checkRuns.check_runs.filter(check => 
              check.name !== 'auto-rebase-and-merge'
            );
            const completedCheckRuns = relevantCheckRuns.filter(check => check.status === 'completed');
            const successfulCheckRuns = completedCheckRuns.filter(check => 
              check.conclusion === 'success' || check.conclusion === 'skipped'
            );
            const allCheckRunsSuccess = relevantCheckRuns.length === 0 || 
              (completedCheckRuns.length === relevantCheckRuns.length && 
               successfulCheckRuns.length === completedCheckRuns.length);
            
            const allChecksPass = allStatusesSuccess && allCheckRunsSuccess;
            
            console.log(`Total check runs: ${checkRuns.check_runs.length}`);
            console.log(`Relevant check runs (excluding auto-merge): ${relevantCheckRuns.length}`);
            console.log(`Completed check runs: ${completedCheckRuns.length}`);
            console.log(`Successful check runs: ${successfulCheckRuns.length}`);
            
            console.log(`Combined status state: ${status.state}`);
            console.log(`Status checks count: ${status.statuses.length}`);
            console.log(`Check runs count: ${checkRuns.check_runs.length}`);
            console.log(`All checks pass: ${allChecksPass}`);
            
            core.setOutput('all_checks_pass', allChecksPass);
            core.setOutput('status_state', status.state);
            core.setOutput('check_runs_count', checkRuns.check_runs.length);
            
            return allChecksPass;

      - name: Wait and recheck status
        if: steps.check-dependabot.outputs.is_dependabot == 'true' && steps.check-status.outputs.all_checks_pass == 'false'
        id: wait-and-recheck
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.inputs?.pr_number || 
                             context.payload.pull_request?.number || 
                             context.issue?.number;
            
            console.log("Initial check failed, waiting and rechecking with retries...");
            
            // Try up to 3 times with increasing wait times
            for (let attempt = 1; attempt <= 3; attempt++) {
              const waitTime = attempt * 60000; // 1, 2, 3 minutes
              console.log(`Attempt ${attempt}/3: Waiting ${waitTime/1000} seconds before rechecking...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
              
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              
              // Get combined status for the head SHA
              const { data: status } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              // Get check runs for the head SHA
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              // More detailed check logic
              const allStatusesSuccess = status.state === 'success' || status.statuses.length === 0;
              
              // Check if all check runs are completed and successful (including skipped)
              // Exclude this workflow's own check runs to avoid circular dependency
              const relevantCheckRuns = checkRuns.check_runs.filter(check => 
                check.name !== 'auto-rebase-and-merge'
              );
              const completedCheckRuns = relevantCheckRuns.filter(check => check.status === 'completed');
              const successfulCheckRuns = completedCheckRuns.filter(check => 
                check.conclusion === 'success' || check.conclusion === 'skipped'
              );
              const allCheckRunsSuccess = relevantCheckRuns.length === 0 || 
                (completedCheckRuns.length === relevantCheckRuns.length && 
                 successfulCheckRuns.length === completedCheckRuns.length);
              
              const allChecksPass = allStatusesSuccess && allCheckRunsSuccess;
              
              console.log(`Attempt ${attempt} - Combined status state: ${status.state}`);
              console.log(`Attempt ${attempt} - Total check runs: ${checkRuns.check_runs.length}`);
              console.log(`Attempt ${attempt} - Relevant check runs (excluding auto-merge): ${relevantCheckRuns.length}`);
              console.log(`Attempt ${attempt} - Completed check runs: ${completedCheckRuns.length}`);
              console.log(`Attempt ${attempt} - Successful check runs: ${successfulCheckRuns.length}`);
              console.log(`Attempt ${attempt} - All checks pass: ${allChecksPass}`);
              
              if (allChecksPass) {
                console.log(`All checks passed on attempt ${attempt}!`);
                core.setOutput('all_checks_pass_after_wait', true);
                return true;
              }
              
              if (attempt < 3) {
                console.log(`Attempt ${attempt} failed, will retry...`);
              }
            }
            
            console.log("All retry attempts exhausted. Checks still not complete after maximum wait time.");
            core.setOutput('all_checks_pass_after_wait', false);
            process.exit(0);

      - name: Check if PR is ready to merge
        id: check-mergeable
        if: steps.check-dependabot.outputs.is_dependabot == 'true' && (steps.check-status.outputs.all_checks_pass == 'true' || steps.wait-and-recheck.outputs.all_checks_pass_after_wait == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.inputs?.pr_number || 
                             context.payload.pull_request?.number || 
                             context.issue?.number;
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Check if PR is ready to merge (not behind base branch)
            const isClean = pr.mergeable_state === 'clean';
            const isUnstable = pr.mergeable_state === 'unstable'; // checks still running but mergeable
            const canMerge = isClean || isUnstable;
            
            console.log(`PR mergeable: ${pr.mergeable}`);
            console.log(`PR mergeable_state: ${pr.mergeable_state}`);
            console.log(`Can merge without rebase: ${canMerge}`);
            
            if (!canMerge) {
              console.log(`Skipping PR #${pr_number} - needs rebase (mergeable_state: ${pr.mergeable_state})`);
              console.log("PR will be auto-merged when Dependabot updates it or base branch changes.");
            }
            
            core.setOutput('can_merge', canMerge);
            core.setOutput('mergeable_state', pr.mergeable_state);
            
            return canMerge;

      - name: Auto-approve PR
        if: steps.check-dependabot.outputs.is_dependabot == 'true' && (steps.check-status.outputs.all_checks_pass == 'true' || steps.wait-and-recheck.outputs.all_checks_pass_after_wait == 'true') && steps.check-mergeable.outputs.can_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.inputs?.pr_number || 
                             context.payload.pull_request?.number || 
                             context.issue?.number;
            
            try {
              // Check if PR is already approved by this workflow
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              
              const existingApproval = reviews.find(review => 
                review.user.login === 'github-actions[bot]' && 
                review.state === 'APPROVED'
              );
              
              if (!existingApproval) {
                // Create an approval review
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr_number,
                  event: 'APPROVE',
                  body: '✅ Auto-approved by Dependabot workflow - all checks passed!'
                });
                
                console.log(`Auto-approved PR #${pr_number}`);
              } else {
                console.log(`PR #${pr_number} already approved by workflow`);
              }
            } catch (error) {
              console.log(`Failed to approve PR #${pr_number}: ${error.message}`);
              // Don't fail the workflow if approval fails
            }

      - name: Auto-merge PR
        if: steps.check-dependabot.outputs.is_dependabot == 'true' && (steps.check-status.outputs.all_checks_pass == 'true' || steps.wait-and-recheck.outputs.all_checks_pass_after_wait == 'true') && steps.check-mergeable.outputs.can_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.inputs?.pr_number || 
                             context.payload.pull_request?.number || 
                             context.issue?.number;
            
            // Get PR status to check if we should merge
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            console.log(`PR mergeable: ${pr.mergeable}`);
            console.log(`PR mergeable_state: ${pr.mergeable_state}`);
            
            // Only merge if PR is in a clean state (no rebase needed) or after rebase
            const canMerge = pr.mergeable_state === 'clean' || pr.mergeable_state === 'unstable';
            
            if (canMerge) {
              // Comment to trigger Dependabot merge
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: '@dependabot merge'
              });
              
              console.log(`Triggered merge for PR #${pr_number}`);
            } else {
              console.log(`Cannot merge PR #${pr_number} - mergeable_state: ${pr.mergeable_state}`);
            }

      - name: Log workflow completion
        if: steps.check-dependabot.outputs.is_dependabot == 'true'
        run: |
          echo "=== Dependabot Auto-Merge Workflow Summary ==="
          echo "PR Number: ${{ steps.pr-details.outputs.pr_number }}"
          echo "PR State: ${{ steps.pr-details.outputs.pr_state }}"
          echo "Mergeable: ${{ steps.pr-details.outputs.mergeable }}"
          echo "Mergeable State: ${{ steps.pr-details.outputs.mergeable_state }}"
          echo "All Checks Pass: ${{ steps.check-status.outputs.all_checks_pass }}"
          echo "Status State: ${{ steps.check-status.outputs.status_state }}"
          echo "Check Runs Count: ${{ steps.check-status.outputs.check_runs_count }}"
          echo "Can Merge: ${{ steps.check-mergeable.outputs.can_merge }}"
          echo "Auto-approved: Attempted if all checks passed and can merge"
          echo "Auto-merged: Attempted if all checks passed and can merge"
