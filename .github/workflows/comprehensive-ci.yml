name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC

env:
  NODE_VERSION: '20'
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  # === Code Quality and Linting ===
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install linting tools
      run: |
        npm install -g markdownlint-cli2 @typescript-eslint/eslint-plugin
        sudo apt-get update && sudo apt-get install -y shellcheck yamllint
    
    - name: Lint markdown files
      run: markdownlint-cli2 "**/*.md"
      continue-on-error: true
    
    - name: Lint shell scripts
      run: |
        find . -type f -name "*.sh" -not -path "./external/*" -not -path "./raycast/extensions/*/node_modules/*" | \
        xargs shellcheck -x --severity=warning --format=github
      continue-on-error: true
    
    - name: Lint YAML files
      run: |
        find . -type f -name "*.yml" -o -name "*.yaml" | \
        xargs yamllint -d "{extends: default, rules: {line-length: {max: 120}}}"
      continue-on-error: true
    
    - name: Check for security issues
      run: |
        # Check for potential secrets
        if grep -r -E "(password|secret|key|token)" --include="*.sh" --include="*.zsh" --exclude-dir=external . | grep -v -E "(#.*|//.*|export.*=.*\$)"; then
          echo "::warning::Potential secrets found in code"
        fi
        
        # Check for unsafe practices
        if grep -r "curl.*|.*sh" --include="*.sh" --include="*.md" --exclude-dir=external . ; then
          echo "::warning::Potentially unsafe curl|sh patterns found"
        fi

  # === macOS Testing Environment ===  
  test-macos:
    name: macOS Integration Tests
    runs-on: macos-latest
    strategy:
      matrix:
        shell: [zsh, bash]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Homebrew dependencies
      run: |
        # Install essential tools for testing
        brew install stow shellcheck gnu-sed
        brew install --cask font-fira-code-nerd-font || true
    
    - name: Test basic setup
      shell: ${{ matrix.shell }} {0}
      run: |
        set -e
        echo "Testing with ${{ matrix.shell }}"
        
        # Test basic script syntax
        bash -n bin/setup.sh
        bash -n bin/health-check.sh
        bash -n bin/measure-shell-performance.sh
        
        # Test stow functionality
        mkdir -p test-home/.config
        cd test-home
        stow -d ../stow -t . zsh || echo "Stow test completed"
        
        # Test environment detection
        export ZSH_ENV_WORK=false
        export ZSH_ENV_PERSONAL=true
        source ../stow/zsh/.config/zsh/environment.zsh || true
        echo "Environment detection: Work=$ZSH_ENV_WORK, Personal=$ZSH_ENV_PERSONAL"
    
    - name: Test performance measurement
      run: |
        # Test the performance measurement script
        chmod +x bin/measure-shell-performance.sh
        timeout 60 ./bin/measure-shell-performance.sh 3 zsh || echo "Performance test completed with timeout"
    
    - name: Test health checks
      run: |
        # Test health check script
        chmod +x bin/health-check.sh
        ./bin/health-check.sh --help
        # Basic health check without full installation
        export DOTFILES_CI_MODE=true
        ./bin/health-check.sh basic || echo "Basic health check completed"

  # === Performance Regression Testing ===
  performance-test:
    name: Performance Regression Tests
    runs-on: macos-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}
        path: base
    
    - name: Checkout PR branch  
      uses: actions/checkout@v4
      with:
        path: pr
    
    - name: Install testing tools
      run: |
        brew install hyperfine jq bc
    
    - name: Performance baseline (base branch)
      working-directory: base
      run: |
        if [ -f "bin/measure-shell-performance.sh" ]; then
          chmod +x bin/measure-shell-performance.sh
          timeout 120 ./bin/measure-shell-performance.sh 10 > ../baseline-performance.log || true
        fi
        
        # Measure basic shell startup
        hyperfine --warmup 3 --runs 10 --export-json ../baseline-hyperfine.json \
          'zsh -i -c exit' || echo "Baseline measurement completed"
    
    - name: Performance test (PR branch)
      working-directory: pr  
      run: |
        if [ -f "bin/measure-shell-performance.sh" ]; then
          chmod +x bin/measure-shell-performance.sh
          timeout 120 ./bin/measure-shell-performance.sh 10 > ../pr-performance.log || true
        fi
        
        # Measure basic shell startup
        hyperfine --warmup 3 --runs 10 --export-json ../pr-hyperfine.json \
          'zsh -i -c exit' || echo "PR measurement completed"
    
    - name: Compare performance
      run: |
        echo "## Performance Comparison" >> performance-report.md
        echo "" >> performance-report.md
        
        if [ -f "baseline-hyperfine.json" ] && [ -f "pr-hyperfine.json" ]; then
          baseline_mean=$(jq -r '.results[0].mean' baseline-hyperfine.json)
          pr_mean=$(jq -r '.results[0].mean' pr-hyperfine.json)
          
          echo "- **Baseline**: ${baseline_mean}s" >> performance-report.md
          echo "- **PR**: ${pr_mean}s" >> performance-report.md
          
          # Calculate percentage change
          change=$(echo "scale=2; ($pr_mean - $baseline_mean) / $baseline_mean * 100" | bc -l || echo "0")
          echo "- **Change**: ${change}%" >> performance-report.md
          
          if (( $(echo "$change > 20" | bc -l) )); then
            echo "::warning::Performance regression detected: ${change}% slower"
          elif (( $(echo "$change < -10" | bc -l) )); then
            echo "::notice::Performance improvement detected: ${change}% faster"
          fi
        fi
        
        # Output comparison if measure-shell-performance.sh results exist
        if [ -f "baseline-performance.log" ] && [ -f "pr-performance.log" ]; then
          echo "" >> performance-report.md
          echo "### Detailed Performance Analysis" >> performance-report.md
          echo "" >> performance-report.md
          echo "**Baseline:**" >> performance-report.md
          echo '```' >> performance-report.md
          tail -5 baseline-performance.log >> performance-report.md || true
          echo '```' >> performance-report.md
          echo "" >> performance-report.md
          echo "**PR:**" >> performance-report.md
          echo '```' >> performance-report.md
          tail -5 pr-performance.log >> performance-report.md || true
          echo '```' >> performance-report.md
        fi
        
        cat performance-report.md
    
    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('performance-report.md')) {
            const report = fs.readFileSync('performance-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🚀 Performance Analysis\n\n' + report
            });
          }

  # === Dependency and Security Scanning ===
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results
        path: trivy-results.sarif
    
    - name: Check Raycast extensions for vulnerabilities
      run: |
        for ext_dir in raycast/extensions/*/; do
          if [ -f "$ext_dir/package.json" ]; then
            echo "Scanning $ext_dir for vulnerabilities..."
            cd "$ext_dir"
            npm audit --audit-level=moderate || echo "Audit completed for $ext_dir"
            cd - > /dev/null
          fi
        done

  # === Integration Testing ===
  integration-test:
    name: Integration Tests
    runs-on: macos-latest
    needs: [lint, test-macos]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Full installation test
      run: |
        # Create test environment
        export DOTFILES_TEST_MODE=true
        export HOMEBREW_NO_AUTO_UPDATE=1
        
        # Test installation scripts
        bash -n bin/setup.sh
        bash -n bin/setup-stow.sh
        bash -n bin/health-check.sh
        
        # Test configuration validation
        mkdir -p test-install
        cd test-install
        
        # Test stow installation  
        stow -d ../stow -t . --no-folding zsh bash git
        
        # Test that symlinks were created correctly
        [ -L .zshenv ] && echo "✓ zsh symlink created"
        [ -L .bashrc ] && echo "✓ bash symlink created" 
        [ -L .gitconfig ] && echo "✓ git symlink created"
    
    - name: Test automation scripts
      run: |
        # Test automation scripts exist and are executable
        chmod +x bin/*.sh
        
        # Test help flags
        ./bin/health-check.sh --help
        ./bin/measure-shell-performance.sh --help
        ./bin/auto-sync.sh --help || echo "auto-sync help completed"
        
        echo "All automation scripts tested successfully"


  # === Notification and Reporting ===
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test-macos, performance-test, security-scan, integration-test]
    if: always()
    
    steps:
    - name: Prepare notification
      run: |
        echo "## CI/CD Pipeline Results" > notification.md
        echo "" >> notification.md
        echo "- **Lint**: ${{ needs.lint.result }}" >> notification.md
        echo "- **macOS Tests**: ${{ needs.test-macos.result }}" >> notification.md
        echo "- **Performance**: ${{ needs.performance-test.result }}" >> notification.md
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> notification.md
        echo "- **Integration**: ${{ needs.integration-test.result }}" >> notification.md
        echo "" >> notification.md
        echo "Commit: ${{ github.sha }}" >> notification.md
        echo "Branch: ${{ github.ref }}" >> notification.md
        
        cat notification.md
    
    - name: Success notification
      if: needs.lint.result == 'success' && needs.test-macos.result == 'success' && needs.security-scan.result == 'success' && needs.integration-test.result == 'success'
      run: |
        echo "::notice::✅ All CI/CD pipeline jobs completed successfully!"
    
    - name: Failure notification  
      if: needs.lint.result == 'failure' || needs.test-macos.result == 'failure' || needs.security-scan.result == 'failure' || needs.integration-test.result == 'failure'
      run: |
        echo "::error::❌ CI/CD pipeline has failures that need attention"
        exit 1